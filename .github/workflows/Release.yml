name: Auto Release on Version Commit

on:
  workflow_dispatch:  # Add manual trigger capability
    inputs:
      version_increment:
        description: 'Version increment (1=patch, 2=minor, 3=major)'
        required: true
        default: '1'
  push:
    branches: [ main ]

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.event.head_commit.message, '1:') || startsWith(github.event.head_commit.message, '2:') || startsWith(github.event.head_commit.message, '3:')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Debug info
        run: |
          echo "Trigger event: ${{ github.event_name }}"
          echo "Commit message: ${{ github.event.head_commit.message || 'Manual trigger' }}"
          echo "Repository structure:"
          ls -la
          echo "Checking Release folder:"
          ls -la bin/Release/net48/ || echo "Release folder doesn't exist or is empty"

      - name: Check if ControllerSupport.dll was modified
        id: check_dll
        if: github.event_name != 'workflow_dispatch'  # Skip this check for manual triggers
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "bin/Release/net48/ControllerSupport.dll"; then
            echo "DLL has been modified"
            echo "dll_modified=true" >> $GITHUB_OUTPUT
          else
            echo "DLL has NOT been modified"
            echo "dll_modified=false" >> $GITHUB_OUTPUT
            echo "Changed files:"
            git diff --name-only ${{ github.event.before }} ${{ github.event.after }}
          fi
      
      # Force DLL modified to true for manual triggers
      - name: Set DLL modified for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: echo "dll_modified=true" >> $GITHUB_OUTPUT
        id: manual_check_dll
      
      - name: Get latest release
        id: latest_release
        if: (steps.check_dll.outputs.dll_modified == 'true') || (github.event_name == 'workflow_dispatch')
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
      
      - name: Calculate new version
        id: version
        if: (steps.check_dll.outputs.dll_modified == 'true') || (github.event_name == 'workflow_dispatch')
        run: |
          # Extract current version without 'v' prefix
          CURRENT_VERSION="${{ steps.latest_release.outputs.release }}"
          CURRENT_VERSION=${CURRENT_VERSION#v}
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Update version based on commit prefix or manual input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_INCREMENT="${{ github.event.inputs.version_increment }}"
          else
            # Extract first character of commit message using shell
            VERSION_INCREMENT=$(echo "${{ github.event.head_commit.message }}" | cut -c1)
          fi
          
          echo "Version increment type: $VERSION_INCREMENT"
          
          if [[ "$VERSION_INCREMENT" == "1" ]]; then
            # Increment patch version
            PATCH=$((PATCH + 1))
          elif [[ "$VERSION_INCREMENT" == "2" ]]; then
            # Increment minor version, reset patch
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$VERSION_INCREMENT" == "3" ]]; then
            # Increment major version, reset minor and patch
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          fi
          
          # Set new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
      
      - name: Check Release folder existence
        if: (steps.check_dll.outputs.dll_modified == 'true') || (github.event_name == 'workflow_dispatch')
        run: |
          if [ ! -d "./bin/Release/net48" ]; then
            echo "::error::Release folder not found! Make sure you've built in Release mode and committed the files."
            exit 1
          fi
          echo "Release folder exists, checking files:"
          ls -la ./bin/Release/net48/
      
      - name: Create zip package
        if: (steps.check_dll.outputs.dll_modified == 'true') || (github.event_name == 'workflow_dispatch')
        run: |
          mkdir -p ./dist
          cp ./bin/Release/net48/ControllerSupport.dll ./dist/ || echo "::error::Failed to copy ControllerSupport.dll"
          cp ./bin/Release/net48/SharpDX.dll ./dist/ || echo "::warning::Failed to copy SharpDX.dll"
          cp ./bin/Release/net48/SharpDX.XInput.dll ./dist/ || echo "::warning::Failed to copy SharpDX.XInput.dll"
          cd ./dist
          ls -la
          zip -r ../ControllerSupport.zip ./*
          cd ..
          ls -la ControllerSupport.zip || echo "::error::Zip file creation failed!"
      
      - name: Create Release
        if: (steps.check_dll.outputs.dll_modified == 'true') || (github.event_name == 'workflow_dispatch')
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: ${{ github.event.head_commit.message || format('Manual release triggered - Version {0}', steps.version.outputs.new_version) }}
          draft: false
          prerelease: false
          files: ./ControllerSupport.zip
        env:
          GITHUB_TOKEN: ${{ secrets.THUNDERSTORE_REPO_TOKEN }}
      
      - name: Trigger Thunderstore Update
        if: (steps.check_dll.outputs.dll_modified == 'true') || (github.event_name == 'workflow_dispatch')
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.THUNDERSTORE_REPO_TOKEN }}
          event-type: upload-to-nexus
          client-payload: '{"version": "${{ steps.version.outputs.version_number }}", "release_url": "${{ steps.create_release.outputs.upload_url }}", "release_notes": "${{ github.event.head_commit.message || format(''Manual release - Version {0}'', steps.version.outputs.new_version) }}"}'
