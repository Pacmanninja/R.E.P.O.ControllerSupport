name: Update Thunderstore Repository

on:
  workflow_dispatch:  # This enables manual triggering
  push:  # You can keep other triggers as well
    branches:
      - main
  release:
    types: [published]  # Triggers whenever you publish a new release

jobs:
  update-thunderstore:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Thunderstore repository
        uses: actions/checkout@v4
        with:
          repository: Pacmanninja/ThunderstoreREPOController
          token: ${{ secrets.THUNDERSTORE_REPO_TOKEN }}
          path: thunderstore-repo
      
      - name: Debug working directory
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing root directory contents:"
          ls -la
      
      - name: Download release assets
        uses: robinraju/release-downloader@v1
        with:
          repository: Pacmanninja/R.E.P.O.ControllerSupport
          latest: true
          fileName: '*.zip'
          out-file-path: 'release-zip'
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug download results
        run: |
          echo "Checking if release-zip directory exists:"
          if [ -d "release-zip" ]; then
            echo "Directory exists. Contents:"
            ls -la release-zip
            echo "Found these zip files:"
            find release-zip -name "*.zip" -type f
          else
            echo "ERROR: release-zip directory does not exist!"
            echo "Current directory contents:"
            ls -la
          fi
      
      - name: Manual extraction fallback
        if: success() || failure()  # Run even if previous step failed
        run: |
          # Find the zip file
          ZIP_FILES=$(find . -name "*.zip" -type f)
          echo "Found zip files: $ZIP_FILES"
          
          # Create extraction directory
          mkdir -p extracted-files
          
          # Try to extract using unzip
          for ZIP_FILE in $ZIP_FILES; do
            echo "Extracting $ZIP_FILE to extracted-files"
            unzip -o "$ZIP_FILE" -d extracted-files || echo "Extraction failed for $ZIP_FILE"
          done
          
          echo "Extraction directory contents:"
          ls -la extracted-files || echo "Cannot list extracted-files (might not exist)"
          
          # Recursively list all files in extracted-files
          echo "All files in extraction directory:"
          find extracted-files -type f || echo "No files found in extracted-files"
      
      - name: Extract release zip
        uses: ihiroky/extract-action@v1
        with:
          file_path: release-zip/*.zip
          extract_dir: extracted-files
      
      - name: Debug extraction results
        run: |
          echo "Checking if extracted-files directory exists:"
          if [ -d "extracted-files" ]; then
            echo "Directory exists. Contents:"
            ls -la extracted-files
            echo "All files in extracted-files (recursive):"
            find extracted-files -type f
          else
            echo "ERROR: extracted-files directory does not exist!"
            echo "Current directory contents:"
            ls -la
          fi
      
      - name: Update DLL in Thunderstore repo
        run: |
          echo "Starting DLL update process"
          echo "Current directory: $(pwd)"
          echo "Listing all directories:"
          find . -type d -maxdepth 2
          
          # Find the DLL file in the extracted files only (not in thunderstore-repo)
          DLL_PATH=$(find ./extracted-files -name "ControllerSupport.dll" -type f | head -n 1)
          
          if [ -z "$DLL_PATH" ]; then
            echo "Error: ControllerSupport.dll not found in extracted files!"
            echo "Listing all files to see what we have:"
            find ./extracted-files -type f
            exit 1
          fi
          
          echo "Found DLL at: $DLL_PATH"
          
          # Ensure target directory exists
          mkdir -p thunderstore-repo/BepInEx/plugins
          
          # Copy the DLL
          cp "$DLL_PATH" thunderstore-repo/BepInEx/plugins/
          
          # Verify the copy worked
          if [ -f "thunderstore-repo/BepInEx/plugins/ControllerSupport.dll" ]; then
            echo "DLL updated successfully"
          else
            echo "Error: DLL copy failed!"
            exit 1
          fi
      
      - name: Get release info
        id: release_info
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/releases/latest
          owner: Pacmanninja
          repo: R.E.P.O.ControllerSupport
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug release info
        run: |
          echo "Release info data:"
          echo '${{ steps.release_info.outputs.data }}' | jq '.'
      
      - name: Update manifest.json and CHANGELOG.md
        run: |
          # Get version from release tag (remove 'v' prefix)
          VERSION="${{ github.ref_name }}"
          echo "Raw version from ref_name: $VERSION"
          
          # If running manually and ref_name isn't a version tag, get it from the release info
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Not triggered by a version tag release, getting version from API"
            VERSION=$(echo '${{ steps.release_info.outputs.data }}' | jq -r '.tag_name')
            echo "Version from API: $VERSION"
          fi
          
          VERSION_CLEAN=$(echo $VERSION | sed 's/^v//')
          echo "Using version: $VERSION_CLEAN"
          
          # Get release description
          RELEASE_BODY=$(echo '${{ steps.release_info.outputs.data }}' | jq -r '.body')
          echo "Release description obtained"
          
          # Update manifest.json
          cd thunderstore-repo
          echo "Thunderstore repo contents:"
          ls -la
          
          if [ -f "manifest.json" ]; then
            echo "Original manifest.json content:"
            cat manifest.json
            
            # Install jq if needed
            sudo apt-get update && sudo apt-get install -y jq
            
            # Update version in manifest.json
            jq ".version_number = \"$VERSION_CLEAN\"" manifest.json > temp.json && mv temp.json manifest.json
            echo "Updated manifest.json version to $VERSION_CLEAN"
            echo "New manifest.json content:"
            cat manifest.json
          else
            echo "Warning: manifest.json not found"
          fi
          
          # Update CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            echo "Original CHANGELOG.md exists"
            # Add new release info to the top of the changelog
            echo -e "## $VERSION_CLEAN ($(date '+%Y-%m-%d'))\n$RELEASE_BODY\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
            echo "Updated CHANGELOG.md with release notes"
          else
            echo "Creating new CHANGELOG.md"
            # Create CHANGELOG.md if it doesn't exist
            echo -e "# Changelog\n\n## $VERSION_CLEAN ($(date '+%Y-%m-%d'))\n$RELEASE_BODY" > CHANGELOG.md
            echo "Created CHANGELOG.md with release notes"
          fi
      
      - name: Commit and push changes
        run: |
          cd thunderstore-repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          echo "Checking for DLL file before commit:"
          ls -la BepInEx/plugins/ || echo "DLL directory not found!"
          
          git add -A  # Add all changes
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update to version $VERSION_CLEAN"
            git push
            echo "Changes committed and pushed successfully"
          fi
      
      - name: Clean up
        if: always()  # Run even if previous steps failed
        run: |
          echo "Cleaning up temporary files"
          rm -rf release-zip extracted-files
          echo "Cleanup complete"
